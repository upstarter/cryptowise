static_resources:
  listeners:
  - address:
      socket_address:
        address: 0.0.0.0
        port_value: 80
    filter_chains:
    - filters:
      - name: envoy.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager
          codec_type: auto
          stat_prefix: ingress_http
          route_config:
            name: local_route
            virtual_hosts:
            - name: backend
              domains:
              - "*.cryptowise.ai"
              routes:
              - match:
                  prefix: "/"
                redirect:
                  path_redirect: "/"
                  https_redirect: true
          http_filters:
          - name: envoy.router
            typed_config: {}
  - address:
      socket_address:
        address: 0.0.0.0
        port_value: 443
    filter_chains:
    - filters:
      - name: envoy.http_connection_manager
        config:
          codec_type: auto
          stat_prefix: ingress_http
          access_log:
            - name: envoy.file_access_log
              config:
                path: "/var/log/access.log"
          route_config:
            name: local_route
            virtual_hosts:
            - name: backend
              domains:
              - "*.cryptowise.ai"
              routes:
              - match:
                  prefix: "/v1"
                route:
                  cluster: api
                  # retry_policy:
                  #   retry_on: connect-failure
                  #   num_retries: 5
                  # timeout: 60s
              - match:
                  prefix: "/"
                route:
                  cluster: frontend
          http_filters:
          - name: envoy.router
            config: {}
      tls_context:
        common_tls_context:
          tls_certificates:
            certificate_chain: { "filename": "/etc/cryptowise-ai.pem" }
            private_key: { "filename": "/etc/cryptowise-ai.key" }

  clusters:
  - name: frontend
    connect_timeout: 10s
    type: strict_dns
    lb_policy: round_robin
    # http2_protocol_options: {}
    load_assignment:
      cluster_name: frontend
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: frontend
                port_value: 80
  - name: api
    connect_timeout: 10s
    type: strict_dns
    lb_policy: round_robin
    # http2_protocol_options: {}
    load_assignment:
      cluster_name: api
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: api
                port_value: 80
      tls_context:
        common_tls_context:
          tls_certificates:
            certificate_chain: { "filename": "/etc/cryptowise-ai.pem" }
            private_key: { "filename": "/etc/cryptowise-ai.key" }
admin:
  access_log_path: "/dev/null"
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 8001

# from instance:
# curl --cacert ./certs/platform-web.ai.pem https://172.28.0.4/v1/topics -vk

# then rebuild it with
# docker-compose up --build -d.

# Make a few requests to your services using curl, then log into a shell with
# docker-compose exec front-envoy /bin/bash

# An access.log file should be in /var/log, showing the results of your requests.
